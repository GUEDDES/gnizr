#summary Tutorial on programming with gnizr using Eclipse and Maven

This document is intended for developers who want to extend gnizr capability or alter it's default application behavior. The build environment and setups described here are only a recommendation. Developers can choose to use other tools and build environment setups. 

= Introduction =

Gnizr is designed for develoeprs to add new capabilities and alter the existing application behavior. The code base of gnizr is structured in a way that attempts to simplify many software engineering tasks. Through a "Hello World" example, this tutorial will overview the gnizr code base structure and show you how to rapidly prototype and implement an extended gnizr. 

== What You Should Already Know ==

Readers of this document are assumed to be familiar with the use of Eclipse for Java development and the basic usage of Maven. In addition, the readers are assumed to have some programming knowledge with [http://www.opensymphony.com/webwork/ WebWork] and [http://www.springframework.org/ Spring] framework. 

Get started with WebWork and Spring:
  * [http://www.springframework.org/documentation Spring Framework Documentation]
  * [http://www.opensymphony.com/webwork/documentation.action WebWork Framework Documentation]

== What You Should Have Already Installed ==

Make sure you have the following installed and properly configured on your machine: 

  # Eclipse IDE + Sysdeo Tomcat Plugin for Eclipse
  # Maven 2
  # Gnizr 2.3.0+

If you are new to developing !WebWork applications in Eclipse, follow [http://www.opensymphony.com/webwork/wikidocs/Setting%20up%20Eclipse%20with%20Tomcat.html these instructions] to set up an integrated development environment of Eclipse and Tomcat. 

= Gnizr Code Base Structure =

Building an extended gnizr, you need to use gnizr API libraries. These API libraries are available for download in our public Maven Repository ([http://dev.gnizr.com/maven2]). As of 2.3.0, the gnizr project consists of multiple Maven project modules. 

{{{
 |-- gnizr (parent)
   |-- gnizr-db (child)
   |-- gnizr-core 
   |-- gnizr-web
   |-- gnizr-delicious
   |-- gnizr-clustermap
   |-- gnizr-robot
   |-- gnizr-test
   |-- gnizr-webapp
}}}

In the `parent` project, its POM file defines all dependent libraries and special Maven plugin configuration for assemble gnizr release. In the `child` projects, their POM files inherit those configuration from the `parent` POM and add customize configurations that are specific to the `child` project. 

||*TIPS*: There are dependencies between `child` projects. Typically new projects that build on gnizr API should define `gnizr-web` and `gnzir-webapp` as their dependent libraries. The `gnizr-web` should have dependency scope `provided`, and the `gnizr-webapp` should have dependency scope `runtime`.||

Different `child` projects provide implementation for different parts of the gnizr application. The `parent` project is responsible for combining `child` project implementation into a single deployable gnizr package. Some `child` project may contains only Java class files, and some others may contain Java class files and static resources, e.g., for building dynamic HTML pages and configuring the application. JUnit tests (Java classes and XML input files) are always reside in the `child` project in which the tests are defined. 

|| *Project Name* || *Description* ||
|| `gnizr-db` || ||
|| `gnizr-core` || ||
|| `gnizr-web` || ||
|| `gnizr-delicious` || ||
|| `gnizr-clustermap` || ||
|| `gnizr-robot` || ||
|| `gnizr-test` || ||
|| `gnizr-webapp` || ||