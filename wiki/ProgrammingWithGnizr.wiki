#summary Programming with gnizr Java API and how to setup a build environment
#labels Phase-Implementation

This document is intended for developers who want to write programs against gnizr Java API. 

= Introduction =

Gnizr provides a set of Java API that allows developers to create new application behavior  and to interface with gnizr data objects -- e.g., user accounts, bookmarks, links, tags and folders and RSS feeds.

Different ways to introduce new application behavior: 
  # Create new !WebWork actions or !JavaScript code that augment the existing gnizr function. 
  # Create custom implementation of gnizr interface components and inject these implementations into a gnizr installation. 
  # Create separate Java programs to manipulate the data objects stored in the gnizr database.
  # Create web mashup programs to consume RDF, JSON or RSS documents published by gnizr.

Developing third-party web mashup programs typically doesn't require special build environment setup. These programs simply read data documents from the appropriate URL published by gnizr. Creating Java programs to access data objects stored in a gnizr database or developing custom gnizr components usually will require the use of *gnizr Core API*. Adding new application behavior by creating WebWork actions usually will require the use of *gnizr Core API* and *gnizr Web Application API*. 

= Your Build Environment You Choose =

We recommend developers to setup build environment using a combination of tools: [http://maven.apache.org Maven], [http://www.eclipse.org Eclipse], [http://tomcat.apache.org Tomcat] and [http://www.mysql.com MySQL]. For the specifics on how to install and use these tools, consult their respective documentations. 

Depending which types of gnizr API you want to use, you can choose to set up your build environment in one of two ways (see below). Option 1 is suitable for building programs that only require using gnizr Core API and do not need to integrate any functions into the web application framework of gnizr. Option 2 is suitable for creating new application behaviors that will integrated into the existing web application framework. 

Here are some examples.

If you want to write a separate Java program to create new gnizr user accounts from an existing enterprise database, you can choose the first option. Your program probably will use gnizr Core API to create user account objects, and it doesn't need to be integrated into the existing gnizr web application framework. 

If you want to add a new kind of search capability in gnizr and make this capability available to all users in a gnizr installation, you should choose the second option. It's likely that your implementation will build on the web application framework of gnizr, which is a collection of WebWork actions and Freemarker template pages. To test and deploy your implementation, you will need to extend from gnizr Web Application API, add configuration to the gnizr WebWork and Spring configuration, place Freemarker template pages in the appropriate file system directories, etc.

== Option 1: ==