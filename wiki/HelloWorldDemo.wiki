#summary Tutorial on programming with gnizr using Eclipse and Maven

This document is intended for developers who want to extend gnizr capability or alter it's default application behavior. The build environment and setups described here are only a recommendation. Developers can choose to use other tools and build environment setups. 

= Introduction =

Gnizr is designed for develoeprs to add new capabilities and alter the existing application behavior. The code base of gnizr is structured in a way that attempts to simplify many software engineering tasks. Through a "Hello World" example, this tutorial will overview the gnizr code base structure and show you how to rapidly prototype and extend gnizr. 

== What You Should Know ==

Readers of this document are assumed to be familiar with the use of Eclipse for Java development and the basic usage of Maven. In addition, the readers are assumed to have some programming knowledge with [http://www.opensymphony.com/webwork/ WebWork] and [http://www.springframework.org/ Spring] framework. 

  * [http://www.springframework.org/documentation Spring Framework Documentation]
  * [http://www.opensymphony.com/webwork/documentation.action WebWork Framework Documentation]
  * [http://www.javaworld.com/javaworld/jw-12-2005/jw-1205-maven.html?lsrc=maven-users An Introduction to Maven 2]

== What You Should Have Installed ==

Make sure you have the following installed and properly configured on your machine: 

  # Eclipse IDE + Sysdeo Tomcat Plugin for Eclipse
  # Maven 2
  # Gnizr 2.3.0+

If you are new to developing !WebWork applications in Eclipse, follow [http://www.opensymphony.com/webwork/wikidocs/Setting%20up%20Eclipse%20with%20Tomcat.html these instructions] to set up an integrated development environment of Eclipse and Tomcat. 

It's essential that you have followed [SetupGnizrDatabase this instruction] and initialized MySQL database for gnizr. In this tutorial, we assume that you have taken the default settings (i.e., DB names, usernames and password) described in the instruction.

= Gnizr Code Base Structure =

Building an extended gnizr, you need to use gnizr API libraries. These API libraries are available for download in our public Maven Repository ([http://dev.gnizr.com/maven2]). As of 2.3.0, the gnizr project consists of multiple Maven project modules. 

{{{
 |-- gnizr (parent)
   |-- gnizr-db (child)
   |-- gnizr-core 
   |-- gnizr-web
   |-- gnizr-delicious
   |-- gnizr-clustermap
   |-- gnizr-robot
   |-- gnizr-test
   |-- gnizr-webapp
}}}

In each project module, in both `parent` and `child`, there is a POM file. In the `parent` project, the POM file defines all dependent libraries and special Maven plugin configuration for assemble gnizr release. In the `child` projects, the POM files inherit those configuration from the `parent` POM and add customize configurations that are specific to the `child` project. 

||*TIPS*: There are dependencies among `child` projects. Usually your own project should define `gnizr-web` and `gnzir-webapp` as dependency libraries. `gnizr-web` should have dependency scope `provided`, and `gnizr-webapp` should have dependency scope `runtime`.||

Different `child` projects provide implementation of different parts of the gnizr application. The `parent` project is responsible for combining `child` project implementation into a single deployable gnizr package. Some `child` project may contains only Java class files, and some others may contain Java class files and static resources, e.g., template pages for building dynamic HTML pages and application configurations. JUnit tests (Java classes and XML input files) always reside in the `child` project in which the tests are defined. 

|| *Project Name* || *Description* ||
|| `gnizr-db` || Implementation of gnizr database operations.  ||
|| `gnizr-core` || Business logic that hides database operations from the high-level implementation. ||
|| `gnizr-web` ||  Interface and abstract implementation of all gnizr !WebWork actions, and convenient classes for !WebWork programming ||
|| `gnizr-delicious` || API for importing user bookmarks from `del.icio.us` ||
|| `gnizr-clustermap` || Clustermap applet ||
|| `gnizr-robot` || Implementation for RSS crawling and bookmark imports||
|| `gnizr-test` || The base implementation of gnizr JUnit tests.||
|| `gnizr-webapp` ||  Main implementation of the application and its configuration files ||

--

= Say "Hello World" =

The objective of our "Hello World" program is to add a new page in gnizr that does the following two things:
  # When a user visits the page in a browser, the page prints "Hello World" in the body of the page ([http://www.flickr.com/photo_zoom.gne?id=2123343895&size=o screenshot]).
  # If a request parameter `message` is defined when visiting the page, the page will print "Hello World" and also the value of `message` ([http://www.flickr.com/photo_zoom.gne?id=2123343931&size=o screenshot]).


== Step 1: Create Maven Project ==

Run the following command to create a Maven project. The `artifactId` parameter defines our project name `HelloWorldWebapp`. The `archetypeArtifactId` parameter defines that your project will use Maven's WAR packaging, as oppose to the default JAR packaging.

{{{
mvn archetype:create 
 -DgroupId=com.example
 -DartifactId=HelloWorldWebapp
 -Dpackagename=com.example.gnizr 
 -DarchetypeArtifactId=maven-archetype-webapp
}}}

== Step 2: Edit POM File ==

In the `HelloWorldWebapp` project directory, you should find `pom.xml`. Edit this file. 

{{{
<project 
  xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.example</groupId>
  <artifactId>HelloWorldWebapp</artifactId>
  <packaging>war</packaging>
  <version>1.0-SNAPSHOT</version>
  <name>HelloWorldWebapp Gnizr Webapp</name>
  <url>http://example.com</url>
  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8.1</version>
      <scope>test</scope>
    </dependency>               
    <dependency>
      <groupId>com.gnizr</groupId>
      <artifactId>gnizr-web</artifactId>
      <!-- replace this value with the gnizr version that you want to work with -->
      <version>2.3.0-M3</version>
      <type>jar</type>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>com.gnizr</groupId>
      <artifactId>gnizr-webapp</artifactId>
      <!-- replace this value with the gnizr version that you want to work with -->
      <version>2.3.0-M3</version>
      <type>war</type>
      <scope>runtime</scope>
    </dependency>
  </dependencies>
  <build>
    <finalName>HelloWorldWebapp</finalName>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
          <source>1.5</source>
          <target>1.5</target>
          <encoding>UTF-8</encoding>
        </configuration>
      </plugin>
      <plugin>
        <artifactId>maven-clean-plugin</artifactId>
        <configuration>
          <filesets>
            <fileset>
              <directory>${basedir}/src/main/webapp</directory>
              <includes>
                <include>**/*</include>
              </includes>
            </fileset>
          </filesets>
        </configuration>
      </plugin>                 
    </plugins>
  </build>      
</project>
}}}

||*Note*: the dependency type of `gnzir-web` is `jar` and scope `provided`, and the dependency type of `gnizr-webapp` is `war` and scope `runtime`. ||

The above POM file configuration will help us to set up the build environment with the following properties:
  * Make available all gnizr API classes and their dependency library classes in our project's `CLASSPATH`. This done through defining `gnzir-web` is of type `jar` and scope `provided`. 
  * Allow the standard gnizr web application (i.e., its WAR file structure) to be "[http://maven.apache.org/plugins/maven-war-plugin/overlays.html overlaid]" on the top of our own web application project.   